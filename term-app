#!/usr/bin/env python3
''' Run an application in a new tmux session.
The session name is derived from the application name, and terminates with it.
Pass in the application to run (with arguments) as positional command line args.
dmenu is used, if no application is given.
'''

import os
import subprocess
import sys
from typing import List

import dmenu
import libtmux

def main(argv: List[str]) -> int:
    ''' Launch cmd in a new tmux session '''
    if len(argv) > 1:
        cmd = argv[1:]
    else:
        try:
            cmd = dmenu.show(_dmenu_path()).split(' ')
        except AttributeError: # user cancelled dmenu
            return 0

    mux = libtmux.Server()
    session_name = _gen_session_name(cmd[0], mux)

    # launch app in detached tmux session
    mux.new_session(session_name, window_command=str.join(' ', cmd))

    # launch terminal and attach tmux session
    launch_cmd = [
        os.getenv("TERMINAL"),
        '-e',
        'tmux',
        'attach',
        '-t',
        session_name
        ]
    subprocess.Popen(launch_cmd)

    return 0


def _dmenu_path() -> List[str]:
    return subprocess.run(
        'dmenu_path',
        text=True,
        capture_output=True,
        check=True
        ).stdout.split('\n')


def _gen_session_name(cmd_name: str,
                      server: libtmux.server.Server = libtmux.Server()) -> str:
    ''' generate the session name.
    cmd_name: name of the command to be run
    server: tmux server
    Returns cmd_name, unless there is already an existing session with that
    name. If there is, then a serial number is appended to prevent collision.
    '''
    serial = 0
    session_name = cmd_name
    while server.find_where({'session_name': session_name}):
        serial += 1
        session_name = f'{cmd_name}{serial}'
    return session_name


if __name__ == '__main__':
    sys.exit(main(sys.argv))
