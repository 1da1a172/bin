#!/usr/bin/zsh
#
# Convert a MAC address to various formats
# Reads the Wayland and xorg primary for a valid mac

typeset -ir EXIT_CLEAN=7
typeset -ir ERR_BAD_ARGS=257

function main() {
  typeset mac

  mac=$(paste)
  valid_mac <<< "$mac" || mac=$(prompt_mac) || bail $?

  {menu_select 'Select a format:' $(all_formats <<< $mac) | tr -d '\n' || paste} | copy
}

function copy() {
  [[ -n "$WAYLAND_DISPLAY" ]] && wl-copy -p
  [[ -n "$DISPLAY" ]] && xclip
}

function paste() {
  if [[ -n "$WAYLAND_DISPLAY" ]]; then
    wl-paste -pn
  elif [[ -n "$DISPLAY" ]]; then
    xclip -o
  else
    printf 'Unknown graphical environment.\n' >&2
  fi
}

function all_formats() {
  { remove_delim | to_lower | tee \
      >(to_upper) \
      >(add_delim) \
      >(add_delim | to_upper) \
      >(add_delim '-') \
      >(add_delim '-' | to_upper) \
      >(add_delim '.' 4) \
      >(add_delim '.' 4 | to_upper)
  } | sort -Vir
}

function normalize() {
  remove_delim | to_lower | add_delim ':'
}

function to_lower() {
  tr '[A-F]' '[a-f]'
}

function to_upper() {
  tr '[a-f]' '[A-F]'
}

function remove_delim() {
  tr -dc '[:xdigit:]\n'
}

# assumes 12 undelimited hex chars on stdin
function add_delim() {
  typeset macnew
  typeset stripped
  typeset -i i
  typeset d=${1:-:}    # delimiter, default ':'
  typeset -i l=${2:-2} # length between delimiters, default 2

  read stripped

  macnew="${stripped:0:$l}"
  for i in $(seq $l $l $((12 - l))); do
    macnew+="$d${stripped:$i:$l}"
  done
  echo $macnew
}

function bail() {
  [[ "$1" == $EXIT_CLEAN ]] && exit 0 || exit "$1"
}

################################################################################
# Is stdin a valid mac?
# Returns:
#  0=valid mac
#  1=invalid mac
################################################################################
function valid_mac() {
  [[ $(remove_delim | tr -d '\n' | wc -c) == 12 ]]
}

################################################################################
# Prompt for a mac address.
# Undisplayed 'exit' option or pressing 'ESC' will return code $EXIT_CLEAN to
#   trigger an abort to the script.
# Validates to make sure the selection is a valid MAC address.
# Prints the MAC address to stdout.
# Global variables:
#  EXIT_CLEAN
# Returns:
#  EXIT_CLEAN=user requested exit
################################################################################
function prompt_mac() {
  typeset mac
  typeset prompt='Enter a MAC address:'

  while ! valid_mac <<< "$mac"; do
    : | dmenu -p "$prompt" | read mac
    [[ "$mac" == 'exit' ]] || [[ -z "$mac" ]] && return $EXIT_CLEAN
  done
  echo -n "$mac"
}

################################################################################
# Uses dmenu to select an option. Undisplayed 'exit' option or pressing 'ESC'
# will return code $EXIT_CLEAN to trigger an abort to the script. Validates to
# make sure the selection is an option. If there is only 1 option, it will
# automatically choose it. Prints selection to stdout
# Global variables:
#  ERR_BAD_ARGS
#  EXIT_CLEAN
# Arguments:
#  $1=prompt
#  $2+=menu items
# Returns:
#  ERR_BAD_ARGS=bad arguments
#  EXIT_CLEAN=user requested exit
################################################################################
function menu_select() {
  [[ -z "$2" ]] && return $ERR_BAD_ARGS

  typeset selection
  typeset prompt
  typeset -a menu

  prompt="$1"
  shift
  menu=($*)

  if [[ ${#menu} == 1 ]]; then
    echo "$menu"
  else
    while [[ -z "${menu[(r)$selection]}" ]]; do
      echo "${(F)menu}" | dmenu -p "$prompt" | read selection
      [[ "${(L)selection}" == 'exit' ]] \
        || [[ -z "$selection" ]] \
        && return $EXIT_CLEAN
    done
    echo "$selection"
  fi
}

main "$@"
