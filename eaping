#!/usr/bin/zsh

source ~/lib/ip.zsh

function help_msg() {
  echo 'stub function for help output'
  exit $1
}

function set_ip_version() {
  if ! $FORCE_V4 && ! $FORCE_V6; then
    if [[ $1 -eq 4 ]]; then 
      FORCE_V4=true
    elif [[ $1 -eq 6 ]]; then
      FORCE_V6=true
      echo 'eapol_test does not support IPv6 yet' >&2
      exit ${EXIT[BAD_OPT]}
    else
      echo 'Internal error. Attempted to set bad IP version.' >&2
      exit ${EXIT[SCRIPT_ERROR]}
    fi
  else
    echo 'Only one -4 or -6 option may be specified' >&2
    exit ${EXIT[BAD_OPT]}
  fi
}

function set_server() {
  if [[ -n "${RAD_SERVER}" ]]; then
    echo 'Only one -r option may be specified' >&2
    exit ${EXIT[BAD_OPT]}
  fi

  RAD_SERVER="$1"
}

function check_server() {
  if [[ -z "${RAD_SERVER}" ]]; then
    echo 'RADIUS server not specified. Use "-r".' >&2
    exit ${EXIT[MISSING_OPT]}
  fi
}

function set_ip() {
  if ip::valid_addr "$1"; then
    RAD_IP="$1"
  else
    if ${FORCE_V6}; then
      RAD_IP=$(dig +short "$1" AAAA)
    elif ${FORCE_V4}; then
      RAD_IP=$(dig +short "$1" A)
    else
      RAD_IP=$(dig +short "$1")
    fi
  fi
}

function check_ip() {
  if ! ip::valid_addr ${RAD_IP}; then
    echo "${RAD_SERVER}: Name or service not known"
    exit ${EXIT[DNS_FAIL]}
  fi
}

function set_config() {
  typeset int=false

  if [[ "$1" == <-> ]] && int=true
  if [[ -n "${CONFIG}" ]]; then
    echo -n 'Only one -c option may be specified' >&2
    ${int} && echo '. Did you mean "-C"?' >&2 || echo >&2
    exit ${EXIT[BAD_OPT]}
  elif [[ ! -r "$1" ]]; then
    echo -n 'File "'$1'" not found or not readable' >&2
    ${int} && echo '. Did you mean "-C"?' >&2 || echo >&2
    exit ${EXIT[BAD_OPT]}
  else
    CONFIG="$1"
  fi
}

function check_config() {
  if [[ -z "${CONFIG}" ]]; then
    echo 'Config file not given. Use "-c".' >&2
    exit ${EXIT[MISSING_OPT]}
  fi
}

function set_count() {
  if [[ -z "${COUNT}" ]]; then
    if [[ "$1" == <0-> ]]; then
      COUNT="$1"
    else
      echo '-C must supply a positive integer' >&2
      exit ${EXIT[BAD_OPT]}
    fi
  else
    echo 'Only one -C option may be specified' >&2
    exit ${EXIT[BAD_OPT]}
  fi
}

function set_port() {
  if [[ -z "${RAD_PORT}" ]]; then
    if [[ "$1" == <0-65536> ]]; then
      RAD_PORT="$1"
    else
      echo 'Port must be an integer from 0 to 65536.' >&2
      exit ${EXIT[BAD_OPT]}
    fi
  else
    echo 'Only one -p option may be specified' >&2
    exit ${EXIT[BAD_OPT]}
  fi
}

function check_port() {
  if [[ -z "${RAD_PORT}" ]]; then
    echo 'Port not specified. Use "-p".' >&2
    exit ${EXIT[MISSING_OPT]}
  fi
}

function set_secret() {
  if [[ -z "${RAD_SEC}" ]]; then
    RAD_SEC="$1"
  else
    echo 'Only one -s option may be specified' >&2
    exit ${EXIT[BAD_OPT]}
  fi
}

function check_secret() {
  if [[ -z "${RAD_SEC}" ]]; then
    echo 'RADIUS secret not specified. Use "-s".' >&2
    exit ${EXIT[MISSING_OPT]}
  fi
}

function catch_quit() {
  typeset msg
  typeset avg=$(echo "${TIME_TOTAL} / (${succ} + ${rej} + ${fail})" | bc -l)
  typeset msg_avg="$(printf '%2.1f' "${avg}")"
  typeset msg_min="$(printf '%2.1f' "${TIME_MIN}")"
  typeset msg_max="$(printf '%2.1f' "${TIME_MAX}")"

  msg="\n" # so we don't start our line with '^\' from the interrupt
  msg+="${counter} auths, "
  msg+="${succ} successful, "
  msg+="${rej} rejected, "
  msg+="${fail} failed, "
  msg+="${timeout} timedout, "
  msg+="min/avg/max ${msg_min}/${msg_avg}/${msg_max} ms"

  echo "${msg}" >&2
}

function catch_int() {
  typeset msg

  echo -n "\n--- ${RAD_SERVER} auth statistics ---"
  catch_quit
  exit 0
}

function rad_test() {
  ## TEMP VARIABLES
  typeset -rA MSG=('SUCC'      '^SUCCESS$'
                   'AUTH_SUCC' '^CTRL-EVENT-EAP-SUCCESS EAP authentication completed successfully$'
                   'REJ'       'Access-Reject'
                   'FAIL'      '^FAILURE$'
                   'EAP_FAIL'  '^EAP: Recieved EAP-Failure$'
                   'AUTH_FAIL' '^CTRL-EVENT-EAP-FAILURE EAP authentication failed$'
                   'TIMEOUT'   '^EAPOL test timed out$')
  typeset -rA RET=('SUCC'      1
                   'AUTH_SUCC' 1
                   'REJ'       2
                   'FAIL'      10
                   'EAP_FAIL'  11
                   'AUTH_FAIL' 12
                   'TIMEOUT'   20)
  typeset output
  typeset time_start
  typeset time_end
  typeset time_span

  # time and run test
  time_start="$(date '+%s.%N')"
  output=$(eapol_test \
    -c "${CONFIG}"    \
    -a "${RAD_IP}"    \
    -p "${RAD_PORT}"  \
    -s "${RAD_SEC}")
  time_end="$(date '+%s.%N')"
  time_span=$(echo "(${time_end} - ${time_start}) * 1000" | bc)

  #parse output for results
  echo "${output}" |  awk "
    /${MSG[SUCC]}/      {exit ${RET[SUCC]}      ;}
    /${MSG[AUTH_FAIL]}/ {exit ${RET[AUTH_FAIL]} ;}
    /${MSG[TIMEOUT]}/   {exit ${RET[TIMEOUT]}   ;}
    /${MSG[AUTH_SUCC]}/ {exit ${RET[AUTH_SUCC]} ;}
    /${MSG[EAP_FAIL]}/  {exit ${RET[EAP_FAIL]}  ;}
    /${MSG[REJ]}/       {exit ${RET[REJ]}       ;}
    /${MSG[FAIL]}/      {exit ${RET[FAIL]}      ;}"
  result=$?

  # handle the results
  message="from ${RAD_SERVER} (${RAD_IP}): eapol_test_seq=${counter} time=${time_span}"
  rad_id="${RAD_SERVER} (${RAD_IP})"
  seq="eapol_test_seq=${counter}"
  msg_time="$(printf 'time=%2.1f ms' ${time_span})"
  case ${result} in
    (0) auth_abort ;;
    (1) auth_succ ;;
    (<2-9>) auth_rej ;;
    (<10-19>) auth_fail ;;
    (<20-29>) auth_timeout ;;
  esac
}

function auth_abort() {
  echo "ABORTED auth to ${rad_id}: ${seq} ${msg_time}"
}

function update_maxmin() {
  if [[ ${counter} == 1 ]]; then
    TIME_MIN=${time_span}
    TIME_MAX=${time_span}
  else
    if [[ ${time_span} < ${TIMEMIN} ]]; then
      TIME_MIN=${time_span}
    elif [[ ${time_span} > ${TIMEMAX} ]]; then
      TIME_MAX=${time_span}
    fi
  fi
}

function update_total() {
  TIME_TOTAL=$(echo "${TIME_TOTAL} + ${time_span}" | bc)
}

function auth_succ() {
  update_maxmin
  update_total
  (( succ++ ))
  echo "SUCCESS from ${rad_id}: ${seq} ${msg_time}"
}

function auth_rej() {
  update_maxmin
  update_total
  (( rej++ ))
  echo "REJECT from ${rad_id}: ${seq} ${msg_time}"
}

function auth_fail() {
  update_maxmin
  update_total
  (( fail++ ))
  echo "FAILURE from ${rad_id}: ${seq} ${msg_time}"
}

function auth_timeout() {
  (( timeout++ ))
  echo "TIMEOUT waiting on ${rad_id}: ${seq}"
}

typeset COUNT
typeset -i counter=0
typeset FORCE_V4=false
typeset FORCE_V6=false
typeset -rA EXIT=('BAD_OPT' 2 'SCRIPT_ERR' 255 'MISSING_OPT' 3 'DNS_FAIL' 4)
typeset RAD_SERVER
typeset RAD_IP
typeset RAD_PORT
typeset RAD_SEC
typeset TIME_MIN=0
typeset TIME_MAX=0
typeset TIME_TOTAL=0
typeset -i succ
typeset -i rej
typeset -i fail
typeset -i timeout

typeset opt
while getopts '46c:C:hp:r:s:' opt; do
  case "${opt}" in
    ('4') set_ip_version 4 ;;
    ('6') set_ip_version 6 ;;
    ('c') set_config "${OPTARG}" ;;
    ('C') set_count "${OPTARG}" ;;
    ('h') help_msg ;;
    ('p') set_port "${OPTARG}" ;;
    ('r') set_server "${OPTARG}" ;;
    ('s') set_secret "${OPTARG}" ;;
  esac
done
unset opt

check_server && set_ip "${RAD_SERVER}"
check_ip
check_config
check_port
check_secret

typeset -r COUNT
typeset -r RAD_SERVER
typeset -r RAD_IP
typeset -r RAD_PORT
typeset -r RAD_SEC

trap catch_quit QUIT
trap catch_int INT

while [[ ${COUNT} -eq 0 ]] || [[ ${counter} -le ${COUNT} ]]; do
  (( counter++ ))
  rad_test
  sleep 1
done
catch_int
